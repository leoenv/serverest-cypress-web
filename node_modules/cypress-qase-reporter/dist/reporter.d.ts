/// <reference types="cypress" />
import { MochaOptions, reporters, Runner } from 'mocha';
import { ConfigLoader, FrameworkOptionsType, TestStatusEnum } from 'qase-javascript-commons';
import { ReporterOptionsType } from './options';
type CypressState = 'failed' | 'passed' | 'pending';
export type CypressQaseOptionsType = Omit<MochaOptions, 'reporterOptions'> & {
    reporterOptions: ReporterOptionsType;
};
/**
 * @class CypressQaseReporter
 * @extends reporters.Base
 */
export declare class CypressQaseReporter extends reporters.Base {
    /**
     * @type {RegExp}
     */
    static qaseIdRegExp: RegExp;
    /**
     * @type {Record<CypressState, TestStatusEnum>}
     */
    static statusMap: Record<CypressState, TestStatusEnum>;
    /**
     * @param {string} title
     * @returns {number[]}
     * @private
     */
    private static getCaseId;
    /**
     * @type {string | undefined}
     * @private
     */
    private screenshotsFolder;
    /**
     * @type {ReporterInterface}
     * @private
     */
    private reporter;
    private testBeginTime;
    private options;
    /**
     * @param {Runner} runner
     * @param {CypressQaseOptionsType} options
     * @param {ConfigLoaderInterface} configLoader
     */
    constructor(runner: Runner, options: CypressQaseOptionsType, configLoader?: ConfigLoader<FrameworkOptionsType<"cypress", ReporterOptionsType>>);
    /**
     * @param {Runner} runner
     * @private
     */
    private addRunnerListeners;
    /**
     * @param {Test} test
     * @private
     */
    private addTestResult;
    /**
     * @param {Test} test
     * @param {number[]} ids
     * @private
     */
    private getSignature;
    private getTestFileName;
    /**
     * @param {Suite} suite
     * @private
     */
    private getFile;
    /**
     * @param {string} title
     * @returns {string}
     * @private
     */
    private removeQaseIdsFromTitle;
    /**
     * Extracts numbers from @qaseid tags, regardless of case.
     * @param tags - An array of tags to process.
     * @returns An array of numbers extracted from the tags.
     */
    private extractQaseIds;
    private convertCypressMessages;
    private getSteps;
}
export {};
