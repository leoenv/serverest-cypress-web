"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractTags = void 0;
const fs = __importStar(require("fs"));
/**
 * Extracts tags for a given scenario name from a Gherkin feature file.
 * @param filePath - Path to the feature file.
 * @param scenarioName - Name of the scenario to search for.
 * @returns An array of tags found for the specified scenario.
 */
function extractTags(filePath, scenarioName) {
    // Read the file content
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    // Split the content into lines
    const lines = fileContent.split('\n');
    let tags = [];
    for (let i = 0; i < lines.length; i++) {
        const trimmedLine = lines[i]?.trim(); // Ensure line exists and trim it
        // Check if the line is a Scenario line and matches the provided name
        if (trimmedLine?.startsWith('Scenario:') && trimmedLine === `Scenario: ${scenarioName}`) {
            // Collect tags from preceding lines
            for (let j = i - 1; j >= 0; j--) {
                const previousLine = lines[j]?.trim(); // Ensure line exists and trim it
                if (previousLine?.startsWith('@')) {
                    tags = previousLine.split(/\s+/).filter(tag => tag.startsWith('@'));
                    break;
                }
                else if (previousLine === '' || previousLine?.startsWith('Feature:')) {
                    // Stop searching if an empty line or the start of a feature is reached
                    break;
                }
            }
            break; // Stop processing further as the scenario is found
        }
    }
    return tags;
}
exports.extractTags = extractTags;
